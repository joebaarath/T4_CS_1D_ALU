/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_6 (
    input clk,
    input rst,
    input [2:0] button,
    input lsb,
    output reg [2:0] test_state,
    output reg [1:0] current_state
  );
  
  
  
  wire [2-1:0] M_test_bool_status;
  reg [1-1:0] M_test_bool_start;
  reg [1-1:0] M_test_bool_lsb;
  boolTest_10 test_bool (
    .clk(clk),
    .rst(rst),
    .start(M_test_bool_start),
    .lsb(M_test_bool_lsb),
    .status(M_test_bool_status)
  );
  wire [2-1:0] M_test_com_status;
  reg [1-1:0] M_test_com_start;
  reg [1-1:0] M_test_com_lsb;
  compareTester_11 test_com (
    .clk(clk),
    .rst(rst),
    .start(M_test_com_start),
    .lsb(M_test_com_lsb),
    .status(M_test_com_status)
  );
  wire [2-1:0] M_test_shift_status;
  reg [1-1:0] M_test_shift_start;
  reg [1-1:0] M_test_shift_lsb;
  shifterTester_12 test_shift (
    .clk(clk),
    .rst(rst),
    .start(M_test_shift_start),
    .lsb(M_test_shift_lsb),
    .status(M_test_shift_status)
  );
  wire [2-1:0] M_test_add_status;
  reg [1-1:0] M_test_add_start;
  reg [1-1:0] M_test_add_lsb;
  adderTester_13 test_add (
    .clk(clk),
    .rst(rst),
    .start(M_test_add_start),
    .lsb(M_test_add_lsb),
    .status(M_test_add_status)
  );
  wire [2-1:0] M_test_m_status;
  reg [1-1:0] M_test_m_start;
  reg [1-1:0] M_test_m_lsb;
  multiplierTester_14 test_m (
    .clk(clk),
    .rst(rst),
    .start(M_test_m_start),
    .lsb(M_test_m_lsb),
    .status(M_test_m_status)
  );
  wire [2-1:0] M_test_mod_status;
  reg [1-1:0] M_test_mod_start;
  reg [1-1:0] M_test_mod_lsb;
  modulo_tester_15 test_mod (
    .clk(clk),
    .rst(rst),
    .start(M_test_mod_start),
    .lsb(M_test_mod_lsb),
    .status(M_test_mod_status)
  );
  reg [1:0] M_result_d, M_result_q = 1'h0;
  localparam IDLE_testState = 3'd0;
  localparam ADDER_testState = 3'd1;
  localparam COMPARE_testState = 3'd2;
  localparam BOOL_testState = 3'd3;
  localparam SHIFT_testState = 3'd4;
  localparam MULTIPLY_testState = 3'd5;
  localparam MODULO_testState = 3'd6;
  
  reg [2:0] M_testState_d, M_testState_q = IDLE_testState;
  
  always @* begin
    M_testState_d = M_testState_q;
    M_result_d = M_result_q;
    
    M_test_bool_start = 1'h0;
    M_test_bool_lsb = lsb;
    M_test_com_start = 1'h0;
    M_test_com_lsb = lsb;
    M_test_shift_start = 1'h0;
    M_test_shift_lsb = lsb;
    M_test_add_start = 1'h0;
    M_test_add_lsb = lsb;
    M_test_m_start = 1'h0;
    M_test_m_lsb = lsb;
    M_test_mod_start = 1'h0;
    M_test_mod_lsb = lsb;
    M_result_d = 1'h0;
    current_state = M_result_q;
    test_state = M_testState_q;
    
    case (M_testState_q)
      IDLE_testState: begin
        M_result_d = 1'h0;
        if (button[0+0-:1]) begin
          M_testState_d = MODULO_testState;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = M_testState_q + 1'h1;
          end
        end
      end
      ADDER_testState: begin
        M_test_add_start = 1'h1;
        M_result_d = M_test_add_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = COMPARE_testState;
          end
        end
      end
      COMPARE_testState: begin
        M_test_com_start = 1'h1;
        M_result_d = M_test_com_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = BOOL_testState;
          end
        end
      end
      BOOL_testState: begin
        M_test_bool_start = 1'h1;
        M_result_d = M_test_bool_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = SHIFT_testState;
          end
        end
      end
      SHIFT_testState: begin
        M_test_shift_start = 1'h1;
        M_result_d = M_test_shift_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = MULTIPLY_testState;
          end
        end
      end
      MULTIPLY_testState: begin
        M_test_m_start = 1'h1;
        M_result_d = M_test_m_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = MODULO_testState;
          end
        end
      end
      MODULO_testState: begin
        M_test_mod_start = 1'h1;
        M_result_d = M_test_mod_status;
        if (button[0+0-:1]) begin
          M_testState_d = M_testState_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_testState_d = IDLE_testState;
          end
        end
      end
    endcase
    if (button[2+0-:1]) begin
      M_testState_d = IDLE_testState;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_result_q <= 1'h0;
      M_testState_q <= 1'h0;
    end else begin
      M_result_q <= M_result_d;
      M_testState_q <= M_testState_d;
    end
  end
  
endmodule
