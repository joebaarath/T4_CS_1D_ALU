/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifterTester_12 (
    input clk,
    input rst,
    input start,
    input lsb,
    output reg [1:0] status
  );
  
  
  
  wire [1-1:0] M_slowclock_value;
  counter_25 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  reg [3:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam IDLE_state = 2'd0;
  localparam TEST_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  reg [1-1:0] M_alu_lsb;
  alu_9 alu (
    .clk(M_slowclock_value),
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .lsb(M_alu_lsb),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 6'h00;
    M_alu_lsb = lsb;
    status = 1'h0;
    if (start == 1'h0) begin
      M_state_d = IDLE_state;
      status = 1'h0;
    end else begin
      
      case (M_state_q)
        IDLE_state: begin
          M_state_d = TEST_state;
        end
        TEST_state: begin
          
          case (M_counter_q)
            4'h1: begin
              M_alu_alufn = 6'h20;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h0;
              if (M_alu_out != 16'hffff) begin
                M_state_d = FAIL_state;
              end
            end
            4'h2: begin
              M_alu_alufn = 6'h20;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h4;
              if (M_alu_out != 16'hfff0) begin
                M_state_d = FAIL_state;
              end
            end
            4'h3: begin
              M_alu_alufn = 6'h20;
              M_alu_a = 16'hf00f;
              M_alu_b = 4'hf;
              if (M_alu_out != 16'h8000) begin
                M_state_d = FAIL_state;
              end
            end
            4'h4: begin
              M_alu_alufn = 6'h21;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h0;
              if (M_alu_out != 16'hffff) begin
                M_state_d = FAIL_state;
              end
            end
            4'h5: begin
              M_alu_alufn = 6'h21;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h8;
              if (M_alu_out != 16'h00ff) begin
                M_state_d = FAIL_state;
              end
            end
            4'h6: begin
              M_alu_alufn = 6'h21;
              M_alu_a = 16'hff0f;
              M_alu_b = 4'hf;
              if (M_alu_out != 16'h0001) begin
                M_state_d = FAIL_state;
              end
            end
            4'h7: begin
              M_alu_alufn = 6'h22;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h0;
              if (M_alu_out != 16'hffff) begin
                M_state_d = FAIL_state;
              end
            end
            4'h8: begin
              M_alu_alufn = 6'h22;
              M_alu_a = 16'hffff;
              M_alu_b = 4'h4;
              if (M_alu_out != 16'hffff) begin
                M_state_d = FAIL_state;
              end
            end
            4'h9: begin
              M_alu_alufn = 6'h22;
              M_alu_a = 16'hf00f;
              M_alu_b = 4'h8;
              if (M_alu_out != 16'hfff0) begin
                M_state_d = FAIL_state;
              end
            end
            4'ha: begin
              M_alu_alufn = 6'h22;
              M_alu_a = 16'hf00f;
              M_alu_b = 4'hf;
              if (M_alu_out != 16'hffff) begin
                M_state_d = FAIL_state;
              end
            end
            4'hb: begin
              M_alu_alufn = 6'h22;
              M_alu_a = 16'h2468;
              M_alu_b = 4'h4;
              if (M_alu_out != 16'h0246) begin
                M_state_d = FAIL_state;
              end
            end
            4'hc: begin
              M_state_d = PASS_state;
            end
          endcase
        end
        PASS_state: begin
          status = 1'h1;
        end
        FAIL_state: begin
          status = 2'h2;
        end
      endcase
      M_counter_d = M_counter_q + 1'h1;
    end
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
